import cv2
import mediapipe as mp

mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_holistic = mp.solutions.holistic

cap = cv2.VideoCapture('C:\\Users\\USER\\Downloads\\123\\IMG_0247.MOV')

# 定義目標影片尺寸
target_width = 1080
target_height = 1920

# mediapipe 啟用偵測全身
with mp_holistic.Holistic(
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5) as holistic:

    if not cap.isOpened():
        print("Cannot open camera")
        exit()
    
    while True:
        ret, img = cap.read()
        if not ret:
            print("Cannot receive frame")
            break

        # 調整影片尺寸到目標尺寸，使用插值方法確保圖像品質
        img = cv2.resize(img, (target_width, target_height), interpolation=cv2.INTER_LINEAR)

        img2 = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = holistic.process(img2)

        # 面部偵測，繪製臉部網格
        mp_drawing.draw_landmarks(
            img,
            results.face_landmarks,
            mp_holistic.FACEMESH_CONTOURS,
            landmark_drawing_spec=None,
            connection_drawing_spec=mp_drawing_styles.get_default_face_mesh_contours_style())

        # 身體偵測，繪製身體骨架
        mp_drawing.draw_landmarks(
            img,
            results.pose_landmarks,
            mp_holistic.POSE_CONNECTIONS,
            landmark_drawing_spec=mp_drawing_styles.get_default_pose_landmarks_style())

        # 获取并显示骨架点的坐标
        if results.pose_landmarks:
            for idx, landmark in enumerate(results.pose_landmarks.landmark):
                h, w, c = img.shape  # 获取图像的高度、宽度和通道数
                cx, cy = int(landmark.x * w), int(landmark.y * h)  # 计算坐标
                cv2.putText(img, f"{idx}", (cx, cy), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1,
                            cv2.LINE_AA)  # 在图像上显示坐标

        # 在視窗中顯示影片
        cv2.imshow('oxxostudio', img)

        if cv2.waitKey(5) == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()
